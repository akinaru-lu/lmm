version: 2.1

references:
  app_release_branches: &app_release_branches /^app-release$/
  manager_release_branch: &manager_release_branch /^manager-release$/

  google_cloud_sdk: &google_cloud_sdk
    docker:
      - image: google/cloud-sdk

jobs:
  api:
    docker:
      - image: circleci/golang:1.12.0
        environment:
          DATASTORE_EMULATOR_HOST: datastore:8081
          DATASTORE_PROJECT_ID: lmm-test
          HTTP_TIMEOUT_SECOND: 3
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_NAME: lmm_test
          MYSQL_USER: root
      - image: circleci/mysql:5.7.25
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 1
      - image: google/cloud-sdk:247.0.0
        name: datastore
        environment:
          PROJECT_ID: lmm-test
        command: gcloud beta emulators datastore start --project=lmm-test --host-port=0.0.0.0:8081
    steps:
      - checkout
      - restore_cache:
          keys:
            - &api_go_mod_cache_key api_go_mod-v1-{{ checksum "api/go/src/lmm/api/go.mod" }}-{{ checksum "api/go/src/lmm/api/go.sum" }}
            - api_go_mod-v1-{{ checksum "api/go/src/lmm/api/go.mod" }}-
            - api_go_mod-v1-
          paths:
            - &api_go_mod_cache_path /go/pkg/mod
      - run:
          name: go mod download
          command: |
            cd api/go/src/lmm/api
            go mod download
      - save_cache:
          key: *api_go_mod_cache_key
          paths:
            - *api_go_mod_cache_path
      - run:
          name: Setup API MySQL
          command: |
            dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
            sudo apt install -y mysql-client || true
            cat api/mysql/sql/init_test.sql | mysql -h localhost --protocol TCP -uroot
      - run: dockerize -wait tcp://datastore:8081 -timeout 30s
      - run:
          name: API Go Test
          command: |
            export LMM_API_TOKEN_KEY=$(cat /proc/sys/kernel/random/uuid | sed 's/-//g')
            cd api/go/src/lmm/api
            mkdir -p /tmp/test-results/api
            gotestsum --junitfile /tmp/test-results/api/api-tests.xml
      - store_test_results:
          path: /tmp/test-results

  gae_node_build_and_deploy_nuxt:
    <<: *google_cloud_sdk
    parameters:
      node_image:
        type: string
      service_name:
        type: string
      universal_mode:
        type: boolean
        default: false
    environment:
      GCP_KEY_FILE: cloud/gcp/credentials/service_account.json
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: npm install
          command: |
            CONTAINER_NAME=$(docker create -it << parameters.node_image >> npm --prefix /<< parameters.service_name >> install)
            docker cp << parameters.service_name >> $CONTAINER_NAME:/.
            docker start -i $CONTAINER_NAME
            docker cp $CONTAINER_NAME:/<< parameters.service_name >>/node_modules << parameters.service_name >>/.
            docker container rm -f $CONTAINER_NAME
      - run:
          name: nuxt build
          command: |
            CONTAINER_NAME=$(docker create -e API_URL=$API_URL -e API_URL_BROWSER=$API_URL_BROWSER -e ASSET_URL=$ASSET_URL -it << parameters.node_image >> npm --prefix /<< parameters.service_name >> run build)
            docker cp << parameters.service_name >> $CONTAINER_NAME:/.
            docker start -i $CONTAINER_NAME
            docker cp $CONTAINER_NAME:/<< parameters.service_name >>/dist << parameters.service_name >>/. || << parameters.universal_mode >>
            docker cp $CONTAINER_NAME:/<< parameters.service_name >>/.nuxt << parameters.service_name >>/.
            docker container rm -f $CONTAINER_NAME
      - run:
          name: setup gcloud env
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode > $GCP_KEY_FILE
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud auth activate-service-account --key-file $GCP_KEY_FILE
      - run:
          name: deploy
          command: |
            cd << parameters.service_name >>
            gcloud app deploy -q << parameters.service_name >>.yaml

workflows:
  version: 2.1
  test_build_deploy:
    jobs:
      - api:
          filters:
            branches:
              ignore:
                - *app_release_branches
                - *manager_release_branch
      - gae_node_build_and_deploy_nuxt:
          node_image: node:10.15.1-alpine
          service_name: app
          universal_mode: true
          filters:
            branches:
              only:
                - *app_release_branches
      - gae_node_build_and_deploy_nuxt:
          node_image: node:10.16.0-alpine
          service_name: manager
          filters:
            branches:
              only:
                - *manager_release_branch
